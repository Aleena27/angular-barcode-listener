(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
var barcodeScanListener;

barcodeScanListener = require('barcode-scan-listener');


/*
Listen for scan with specified product prefix.
@param [Function] onScan - callback to call when scan is successful. Passes the scanned string.
@param [String] prefix - character prefix that appears before the scanned string (e.g. 'P%', 'C%')
 */

module.exports = angular.module('barcodeListener', []).directive('barcodeListener', function() {
  return {
    restrict: 'EA',
    scope: {
      onScan: '=',
      prefix: '@',
      scanDuration: '@?'
    },
    link: function(scope, element, attrs) {
      var removeScanListener, scanDuration;
      scanDuration = +scope.scanDuration || 50;
      removeScanListener = barcodeScanListener.onScan({
        barcodePrefix: scope.prefix,
        scanDuration: scanDuration
      }, scope.onScan);
      return element.on('$destroy', removeScanListener);
    }
  };
});

},{"barcode-scan-listener":2}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  /**
   * Listen for scan with specified characteristics
   * @param  {String} scanCharacteristics.barcodePrefix
   * @param  {Number} [scanCharacteristics.scanDuration]
   * @param  {Function} scanHandler - called with the results of the scan
   * @return {Function} remove this listener
   */

  onScan: function onScan() {
    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var barcodePrefix = _ref.barcodePrefix;
    var scanDuration = _ref.scanDuration;
    var scanHandler = arguments[1];

    if (typeof barcodePrefix !== 'string') {
      throw new TypeError('barcodePrefix must be a string');
    }
    if (scanDuration && typeof scanDuration !== 'number') {
      throw new TypeError('scanDuration must be a number');
    }
    if (typeof scanHandler !== 'function') {
      throw new TypeError('scanHandler must be a function');
    }
    scanDuration = scanDuration || 50;
    var isScanning = false;
    var codeBuffer = '';
    var scannedPrefix = '';
    var finishScan = function finishScan() {
      if (codeBuffer) {
        scanHandler(codeBuffer);
      }
      scannedPrefix = '';
      codeBuffer = '';
      isScanning = false;
    };
    var keypressHandler = function keypressHandler(e) {
      var char = String.fromCharCode(e.which);
      var charIndex = barcodePrefix.indexOf(char);
      var expectedPrefix = barcodePrefix.slice(0, charIndex);
      if (!isScanning) {
        isScanning = true;
        setTimeout(finishScan, scanDuration);
      }
      if (scannedPrefix === barcodePrefix && /[^\s]/.test(char)) {
        codeBuffer += char;
      } else if (scannedPrefix === expectedPrefix && char === barcodePrefix.charAt(charIndex)) {
        scannedPrefix += char;
      }
    };
    var removeListener = function removeListener() {
      document.removeEventListener('keypress', keypressHandler);
    };
    document.addEventListener('keypress', keypressHandler);
    return removeListener;
  }
};
module.exports = exports['default'];
},{}]},{},[1])